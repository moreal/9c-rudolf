diff --git a/dist/index.js b/dist/index.js
index 1c6551b59cb461857e3f39568be302dc385151b6..387f971954a6be898838ac676b3da48b81f14be1 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -170,6 +170,7 @@ __name(encodeUnsignedTx, "encodeUnsignedTx");
 // src/tx/signed.ts
 import { BencodexDictionary as BencodexDictionary3, encode as encode2 } from "@planetarium/bencodex";
 import { Address as Address3 } from "@planetarium/account";
+import * as crypto from 'node:crypto'
 
 // src/bytes.ts
 function bytesEqual(a, b) {
@@ -181,7 +182,7 @@ __name(bytesEqual, "bytesEqual");
 
 // src/tx/signed.ts
 var SIGNATURE_KEY = new Uint8Array([83]);
-async function signTx(tx, signAccount) {
+async function signTx(tx, signAccount, isDigest = false) {
   if (!bytesEqual(
     tx.publicKey,
     (await signAccount.getPublicKey()).toBytes("uncompressed")
@@ -194,6 +195,12 @@ async function signTx(tx, signAccount) {
     throw new Error("The transaction signer does not match to the signAccount");
   }
   const payload = encodeUnsignedTx(tx);
+  if (isDigest) {
+    const digest = await crypto.subtle.digest("SHA-256", encode2(payload));
+    const array = new Uint8Array(digest);
+    const signature = await signAccount.sign(array, true);
+    return { ...tx, signature }
+  }
   const signature = await signAccount.sign(encode2(payload));
   return {
     ...tx,
diff --git a/dist/tx/signed.d.ts b/dist/tx/signed.d.ts
index d13f3ac068d68a9fda7b0ba8d83418ff7b2a4cd1..78cb1ea4f7d6439c4e831e448f442182f875a2d1 100644
--- a/dist/tx/signed.d.ts
+++ b/dist/tx/signed.d.ts
@@ -4,5 +4,5 @@ import { type UnsignedTx } from "./unsigned.js";
 export type SignedTx<T extends UnsignedTx> = T & {
     signature: Signature;
 };
-export declare function signTx(tx: UnsignedTx, signAccount: Account): Promise<SignedTx<typeof tx>>;
+export declare function signTx(tx: UnsignedTx, signAccount: Account, isDigest: boolean = false): Promise<SignedTx<typeof tx>>;
 export declare function encodeSignedTx<T extends UnsignedTx>(tx: SignedTx<T>): Dictionary;
